/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Character;

import Enemies.Enemy;
import GameText.Text;
import Main.Mechanics;

import java.util.Scanner;
import java.util.Random;

/**
 * 
 * @Author Adrian
 * @Edited by David and Adrian
 * @FocusedOn by David
 * @Status Commented and Finished
 * 
 * Printed Text Generated by ChatGPT such as
 * "Archer performs Quick Shot!" or similar text instances
 */
public class Archer extends PlayerStats {
    private Enemy currentEnemy;
    
    public Archer(String playerName) {
        super(playerName, "Archer", 25, 6, 15, 5);
    }
    //Player Name, Character Name, Health, Attack, Speed, Defense 
    

    @Override
    public void setCurrentEnemy(Enemy enemy) {
        this.currentEnemy = enemy;
    }
    //This sets currently spawned Enemy as the target Enemy

    @Override
    public void playerAttack(Scanner scanner) {
        System.out.println(Text.ArcherCombatPrint(this, currentEnemy));
        
        int chosenAttack = Mechanics.readInt("Your turn: ", 3, Text.ArcherCombatPrint(this, currentEnemy));
        
        switch (chosenAttack) {
            case 1:
                System.out.println("====================");
                System.out.println("Archer performs Quick Shot!");
                performQuickShot();
                break;
            case 2:
                System.out.println("====================");
                System.out.println("Archer performs Aimed Shot!");
                performAimedShot();
                break;
            case 3:
                System.out.println("====================");
                System.out.println("Archer performs Multi-Shot!");
                performMultiShot();
                break;
            default:
                System.out.println("====================");
                System.out.println("Invalid choice. Archer hesitates.");
                break;
                //Should not print as Mechanics.readInt() has error handling built in
                //If this prints there is a bug in the code
        }
    }

    // --- Calculation of Damage ---
    
    private int calculateDamage(int offset, int increase) {
        Random random = new Random();
        
        int damage = getAttack() + offset + random.nextInt(increase + 1) - currentEnemy.getDefense();
        /*
        Damage =
            + Player Attack Value
            +/- Offset from Player Attack Value
            + Random Increase in Damage
            - Current Enemy's Defense Value
        
        Example: Damage = 6 + 2 + (0 to 3) - 2
        */
        
        if (damage < 0) {
            damage = 0;
        }
        //Prevents negative damage from accidentally healing the Enemy
        
        return damage;
    }
    
    // --- 3 Attacks available for Archer ---
    
    public void performQuickShot() {
        final int ATTACK_OFFSET = 2;
        final int DAMAGE_RANGE = 4;
        
        int damage = calculateDamage(ATTACK_OFFSET, DAMAGE_RANGE);
        currentEnemy.takeDamage(damage);
        poisonedCheck();
    }

    public void performAimedShot() {
        final int ATTACK_OFFSET = 6;
        final int DAMAGE_RANGE = 6;
        
        int damage = calculateDamage(ATTACK_OFFSET, DAMAGE_RANGE);
        currentEnemy.takeDamage(damage);
        poisonedCheck();
    }

    public void performMultiShot() {
        final int MAX_ARROWS = 5;
        final int MIN_ARROWS = 2;
        final int ATTACK_OFFSET_PER_ARROW = 0;
        final int DAMAGE_RANGE_PER_ARROW = 3;
        
        Random random = new Random();
        int amountOfArrows = random.nextInt(MAX_ARROWS - MIN_ARROWS + 1) + MIN_ARROWS;
        //Random amount of Arrows between 2-5
        int totalDamage = 0;
    
        for (int i = 1; i < amountOfArrows + 1; i++) {
            int arrowDamage = calculateDamage(ATTACK_OFFSET_PER_ARROW,DAMAGE_RANGE_PER_ARROW);
            //Each Arrow deals a random amount of damage
            
            totalDamage += arrowDamage;
            //Each Arrow Damage is added to totalDamage
        }
        // Loop through the random amount of arrows

        currentEnemy.takeDamage(totalDamage);
        poisonedCheck();
    }
    
    // --- Method Effects ---
    
    @Override
    public void poisonedCheck() {
        final int POISON_DAMAGE = 3;
        
        if (getIsPoisoned() == true) {
            isPoisonedFalse();
            this.takeDamage(POISON_DAMAGE);
            System.out.println(this.getName() + " took " + POISON_DAMAGE + " Poison Damage and slowed");
            System.out.println("====================");
        }
        //Finishing turn deals poison damage
    }
}
