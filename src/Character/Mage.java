/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Character;

import java.util.Scanner;
import java.util.Random;

import Enemies.Enemy;
import GameText.Text;
import Main.Mechanics;

/**
 * 
 * @Author Adrian
 * @Edited by David and Adrian
 * @FocusedOn by David
 * @Status Commented and Finished
 * 
 * Printed Text Generated by ChatGPT such as
 * "Mage casts Fireball!" or similar text instances
 */
public class Mage extends PlayerStats {
    private Enemy currentEnemy;
    
    public Mage(String pName) {
        super(pName, "Mage", 30, 4, 9, 4);
    }
    //Player Name, Character Name, Health, Attack, Speed, Defense

    @Override
    public void setCurrentEnemy(Enemy enemy) {
        this.currentEnemy = enemy;
    }

    @Override
    public void playerAttack(Scanner scanner) 
    {
        System.out.println(Text.MageCombatPrint(this, currentEnemy));
        int chosenAttack = Mechanics.readInt("Your turn: ", 3, Text.MageCombatPrint(this, currentEnemy));
        
       
        switch (chosenAttack) {
            case 1:
                System.out.println("====================");
                System.out.println("Mage casts Fireball!");
                performFireball();
                break;
            case 2:
                System.out.println("====================");
                System.out.println("Mage casts Frostbolt!");
                performFrostbolt();
                break;
            case 3:
                System.out.println("====================");
                System.out.println("Mage casts Arcane Blast!");
                performArcaneBlast();
                break;
            default:
                System.out.println("====================");
                System.out.println("Invalid choice. Mage hesitates.");
                break;
                //Should not print as Mechanics.readInt() has error handling built in
                //If this prints there is a bug in the code
        }
    }

    // --- Calculation of Damage ---
    
    private int calculateDamage(int offset, int increase) {
        Random random = new Random();
        
        int damage = getAttack() + offset + random.nextInt(increase + 1) - currentEnemy.getDefense();
        /*
        Damage =
            + Player Attack Value
            +/- Offset from Player Attack Value
            + Random Increase in Damage
            - Current Enemy's Defense Value
        
        Example: Damage = 3 + 0 + (0 to 3) - 2
        */
        
        if (damage < 0) {
            damage = 0;
        }
        //Prevents negative damage from accidentally healing the Enemy
        
        return damage;
    }
    
    // --- 3 Attack available for Mage ---
    
    public void performFireball() {
        final int ATTACK_OFFSET = 10;
        final int DAMAGE_RANGE = 4;
        final int TIME_UNIT = 40;
        
        int damage = calculateDamage(ATTACK_OFFSET, DAMAGE_RANGE);

        currentEnemy.takeDamage(damage);
        addTimeUnit(TIME_UNIT);
        currentEnemy.isBurningTrue();
        poisonedCheck();
    }

    public void performFrostbolt() {
        final int ATTACK_OFFSET = 0;
        final int DAMAGE_RANGE = 4;
        final int TIME_UNIT = 70;
        final int SLOW_ENEMY_STAT = 5;
        
        int damage = calculateDamage(ATTACK_OFFSET, DAMAGE_RANGE);

        currentEnemy.takeDamage(damage);
        addTimeUnit(TIME_UNIT);
        currentEnemy.slowSpeed(SLOW_ENEMY_STAT);
        poisonedCheck();

    }

    public void performArcaneBlast() {
        final int ATTACK_OFFSET = 12;
        final int DAMAGE_RANGE = 8;
        final int TIME_UNIT = 150;
        final int ENEMY_TIME_UNIT = 50;
        
        int damage = calculateDamage(ATTACK_OFFSET, DAMAGE_RANGE);
        

        currentEnemy.takeDamage(damage);
        addTimeUnit(TIME_UNIT);
        currentEnemy.addTimeUnit(ENEMY_TIME_UNIT);
        poisonedCheck();

    }
    
    // --- Method Effects ---
    
    @Override
    public void poisonedCheck() {
        final int POISON_DAMAGE = 3;
        
        if (getIsPoisoned() == true) {
            isPoisonedFalse();
            this.takeDamage(POISON_DAMAGE);
            System.out.println(this.getName() + " took " + POISON_DAMAGE + " Poison Damage and slowed");
            System.out.println("====================");
        }
        //Finishing turn deals poison damage
    }
}