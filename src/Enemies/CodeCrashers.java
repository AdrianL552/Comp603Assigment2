/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Enemies;

import java.util.Random;

import Character.PlayerStats;
import Main.Mechanics;

/**
 *
 * @Author David
 * @Edited by David
 * @FocusedOn by David
 * @Status Commented and Finished
 *
 * Enemy Name and Printed Texted Generated by ChatGPT
 * "Code Crashers" and text like "Code Crashers attacks with Code Avalanche"
 */

public class CodeCrashers extends Enemy {
    private final PlayerStats player;

    public CodeCrashers(PlayerStats player) {
        super("Code Crashers", 8, 12, 2, 6, 30, 8, 3);
        this.player = player;
    }
    //Name, XpMinDrop, XpMaxDrop, CoinMinDrop, CoinMax Drop, Health, Speed, Defense
    
    @Override
    public void choice() {
        Random random = new Random();
        int action = random.nextInt(3);

        switch (action) {
            case 0:
                attack();
                break;
            case 1:
                specialAttack();
                break;
            case 2:
                defend();
                break;
        }
    }

    // --- Calculation of Damage ---
    
    private int calculateDamage(int minDamage, int maxDamage) {
        Random random = new Random();
        int damage = random.nextInt(maxDamage - minDamage + 1) + minDamage - player.getDefense();
        /*
        Damage =
            + Random Damage Between Max and Min
            + Minimum Damage
            - Player's Defense Value
        */
        
        if (damage < 0) {
            damage = 0;
        }
        //Prevents negative damage from accidentally healing the Player
        
        return damage;
    }

    // --- 3 Moves available for Code Crashers ---
    
    @Override
    public void attack() {
        defendingCheck();

        System.out.println("Code Crashers launch a Code Avalanche!");
        int damage = calculateDamage(12, 18);

        System.out.println("Code Avalanche deals " + damage + " damage!");
        System.out.println("====================");

        player.takeDamage(damage);
        addTimeUnit(80);
        

        slowedCheck();
        burningCheck();
        poisonedCheck();
    }

    @Override
    public void specialAttack() {
        defendingCheck();

        System.out.println("Code Crashers execute a Segmentation Fault!");
        int damage = calculateDamage(18, 24);

        System.out.println("Segmentation Fault deals " + damage + " damage!");
        System.out.println("====================");

        player.takeDamage(damage);
        addTimeUnit(150);
        player.isPoisonedTrue();
        

        slowedCheck();
        burningCheck();
        poisonedCheck();
    }

    @Override
    public void defend() {
        if (getIsDefending() == true) {
            System.out.println("Code Crashers continue to brace with Error Handling!");
        } else {
            System.out.println("Code Crashers brace with Error Handling!");
        }
        System.out.println("====================");

        this.increaseDefense(12);
        addTimeUnit(25);
        

        slowedCheck();
        burningCheck();
        poisonedCheck();
    }

    // -- Methods Effects --    

    public void defendingCheck() {
        if (getIsDefending() == true) {
            isDefendingFalse();
            System.out.println("Code Crashers finish their Error Handling.");
            System.out.println("====================");
            
        }
        //Finish Defending before Attacking
    }

    @Override
    public void slowedCheck() {
        if (getIsSlowed() == true) {
            resetSpeed();
            System.out.println("Code Crashers resume normal operations!");
            System.out.println("====================");
            
        }
        //Finishing turn removes slowed effect 
    }

    @Override
    public void burningCheck() {
        final int BURN_DAMAGE = 8;

        if (getIsBurning() == true) {
            isBurningFalse();
            this.takeDamage(BURN_DAMAGE);
            System.out.println("Code Crashers suffer " + BURN_DAMAGE + " damage from a Code Blaze!");
            System.out.println("====================");
            
        }
        //Finishing turn deals burn damage
    }

    @Override
    public void poisonedCheck() {
        final int POISON_DAMAGE = 5;

        if (getIsPoisoned() == true) {
            isPoisonedFalse();
            this.takeDamage(POISON_DAMAGE);
            System.out.println("Code Crashers take " + POISON_DAMAGE + " damage from a Logic Leak!");
            System.out.println("====================");
            
        }
        //Finishing turn deals poison damage
    }
}